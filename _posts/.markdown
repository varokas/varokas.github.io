---
layout:	post
title:	"Using Let’s Encrypt with Nginx CentOS 7"
date:	2017-06-15
---

  This is to recap the steps outlined in this digital ocean’s [post](https://www.digitalocean.com/community/tutorials/how-to-secure-nginx-with-let-s-encrypt-on-centos-7)

#### Setup Firewall

sudo firewall-cmd --add-port=443/tcp --permanent  
sudo firewall-cmd --add-port=80/tcp --permanent  
sudo firewall-cmd --reload#### Install Nginx

sudo yum install nginx#### Configure Nginx for Domain Validation

Let’s Encrypt needs to know that you are the legitimate domain owner. The easiest way to prove this is to add a path in nginx that Let’s Encrypt public server can call and validate

$ sudo vi /etc/nginx/default.d/le-well-known.conflocation ~ /.well-known {  
 allow all;  
}$ sudo systemctl restart nginx#### Obtain the cert

$ sudo certbot certonly -a webroot --webroot-path=/usr/share/nginx/html -d example.com -d [www.example.com](http://www.example.com)#### Generate Strong Diffie-Hellman Group

$ sudo openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048#### Add Cert to Nginx

## /etc/nginx/conf.d/ssl.confserver {  
 listen 443 http2 ssl;  
 server\_name example.com [www.example.com;](http://www.example.com;)  
 ssl\_certificate /etc/letsencrypt/live/example.com/fullchain.pem;  
 ssl\_certificate\_key /etc/letsencrypt/live/example.com/privkey.pem; #################################################################  
 # from <https://cipherli.st/>   
 #and [https://raymii.org/s/tutorials/Strong\_SSL\_Security\_On\_nginx.html](https://raymii.org/s/tutorials/Strong_SSL_Security_On_nginx.html) ########################################################### ssl\_protocols TLSv1 TLSv1.1 TLSv1.2;  
 ssl\_prefer\_server\_ciphers on;  
 ssl\_ciphers “EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH”;  
 ssl\_ecdh\_curve secp384r1;  
 ssl\_session\_cache shared:SSL:10m;  
 ssl\_session\_tickets off;  
 ssl\_stapling on;  
 ssl\_stapling\_verify on; resolver 8.8.8.8 8.8.4.4 valid=300s;  
 resolver\_timeout 5s; # Disable preloading HSTS for now. You can use the commented out header line that includes  
 # the “preload” directive if you understand the implications.  
  
 add\_header Strict-Transport-Security “max-age=63072000;includeSubdomains; preload”;  
 add\_header Strict-Transport-Security “max-age=63072000;includeSubdomains”;  
 add\_header X-Frame-Options DENY;  
 add\_header X-Content-Type-Options nosniff;################################### END <https://cipherli.st/> BLOCK ################################### ssl\_dhparam /etc/ssl/certs/dhparam.pem; location ~ /.well-known {  
 allow all;  
 } # The rest of your server block  
 root /usr/share/nginx/html;  
 index index.html index.htm; location / {  
 # First attempt to serve request as file, then  
 # as directory, then fall back to displaying a 404.  
 try\_files $uri $uri/ =404;  
 }  
}#### Setup HTTP redirects to HTTPs

$ sudo vi /etc/nginx/default.d/ssl-redirect.confreturn 301 [https://$host$request\_uri;](https://$host$request_uri;)$ sudo systemctl restart nginx**Enable Nginx**

$ sudo systemctl enable nginx#### Setup Auto Renewal

$ sudo certbot renew  
$ sudo crontab -e30 2 * * 1 /usr/bin/certbot renew >> /var/log/le-renew.log  
35 2 * * 1 /usr/bin/systemctl reload nginx$ sudo systemctl restart nginx  